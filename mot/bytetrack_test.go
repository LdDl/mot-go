package mot

import (
	"encoding/csv"
	"fmt"
	"os"
	"strings"
	"testing"
)

func TestByteTrackerMatchObjectsSpread(t *testing.T) {
	bboxesIterations := [][]Rectangle{
		{NewRect(378.0, 147.0, 173.0, 243.0)},
		{NewRect(374.0, 147.0, 180.0, 253.0)},
		{NewRect(375.0, 154.0, 178.0, 256.0)},
		{NewRect(376.0, 162.0, 177.0, 267.0)},
		{NewRect(375.0, 166.0, 178.0, 268.0)},
		{NewRect(375.0, 177.0, 186.0, 266.0)},
		{NewRect(370.0, 185.0, 197.0, 273.0)},
		{NewRect(363.0, 209.0, 203.0, 264.0)},
		{NewRect(70.0, 14.0, 227.0, 254.0), NewRect(364.0, 214.0, 200.0, 262.0)},
		{NewRect(365.0, 218.0, 205.0, 263.0)},
		{NewRect(67.0, 23.0, 236.0, 246.0), NewRect(366.0, 231.0, 209.0, 260.0)},
		{NewRect(73.0, 18.0, 227.0, 264.0), NewRect(610.0, 47.0, 324.0, 355.0), NewRect(370.0, 238.0, 199.0, 259.0), NewRect(381.0, -1.0, 103.0, 60.0)},
		{NewRect(67.0, 16.0, 229.0, 271.0), NewRect(370.0, 250.0, 195.0, 264.0), NewRect(381.0, -2.0, 106.0, 58.0)},
		{NewRect(62.0, 15.0, 233.0, 268.0), NewRect(365.0, 257.0, 205.0, 264.0), NewRect(379.0, -1.0, 109.0, 59.0)},
		{NewRect(60.0, 7.0, 234.0, 279.0), NewRect(360.0, 269.0, 212.0, 260.0), NewRect(380.0, -1.0, 109.0, 60.0)},
		{NewRect(50.0, 41.0, 251.0, 295.0), NewRect(619.0, 25.0, 308.0, 399.0), NewRect(361.0, 276.0, 215.0, 265.0), NewRect(380.0, -1.0, 110.0, 63.0)},
		{NewRect(48.0, 36.0, 242.0, 302.0), NewRect(622.0, 21.0, 299.0, 411.0), NewRect(357.0, 283.0, 222.0, 255.0), NewRect(379.0, 0.0, 113.0, 64.0)},
		{NewRect(41.0, 28.0, 245.0, 319.0), NewRect(625.0, 31.0, 308.0, 392.0), NewRect(350.0, 306.0, 239.0, 231.0), NewRect(377.0, 0.0, 116.0, 65.0)},
		{NewRect(630.0, 98.0, 294.0, 324.0), NewRect(346.0, 310.0, 250.0, 239.0), NewRect(378.0, 0.0, 112.0, 65.0)},
		{NewRect(636.0, 99.0, 290.0, 323.0), NewRect(344.0, 320.0, 254.0, 229.0), NewRect(378.0, 2.0, 114.0, 65.0)},
		{NewRect(636.0, 103.0, 295.0, 318.0), NewRect(347.0, 332.0, 251.0, 211.0)},
		{NewRect(362.0, 1.0, 147.0, 90.0), NewRect(637.0, 104.0, 292.0, 321.0), NewRect(337.0, 344.0, 272.0, 196.0)},
		{NewRect(360.0, -2.0, 152.0, 97.0), NewRect(12.0, 74.0, 237.0, 324.0), NewRect(639.0, 104.0, 293.0, 316.0), NewRect(347.0, 350.0, 258.0, 185.0)},
		{NewRect(361.0, -4.0, 149.0, 99.0), NewRect(9.0, 112.0, 251.0, 313.0), NewRect(627.0, 106.0, 314.0, 321.0)},
		{NewRect(360.0, -3.0, 151.0, 99.0), NewRect(15.0, 115.0, 231.0, 311.0), NewRect(633.0, 91.0, 297.0, 346.0)},
		{NewRect(362.0, -7.0, 148.0, 106.0), NewRect(10.0, 109.0, 241.0, 320.0), NewRect(639.0, 93.0, 294.0, 347.0)},
		{NewRect(362.0, -9.0, 146.0, 109.0), NewRect(12.0, 109.0, 233.0, 326.0), NewRect(639.0, 95.0, 288.0, 347.0)},
	}

	// Add confidence scores for each detection - testing both high and low confidence cases
	confidenceIterations := [][]float64{
		{0.91}, {0.89}, {0.92}, {0.88}, {0.90}, {0.91}, {0.87}, {0.85},
		{0.40, 0.89}, {0.92}, {0.39, 0.91}, {0.87, 0.92, 0.38, 0.89},
		{0.41, 0.88, 0.91}, {0.36, 0.92, 0.89}, {0.89, 0.41, 0.93},
		{0.87, 0.93, 0.39, 0.88}, {0.90, 0.88, 0.42, 0.86}, {0.91, 0.87, 0.40, 0.89},
		{0.89, 0.41, 0.92}, {0.37, 0.91, 0.89}, {0.88, 0.42},
		{0.36, 0.93, 0.87}, {0.91, 0.39, 0.88, 0.90}, {0.43, 0.87, 0.93},
		{0.89, 0.90, 0.38}, {0.91, 0.37, 0.89}, {0.88, 0.39, 0.92},
	}

	tracker := NewByteTracker(5, 0.3, 0.5, 0.3, MatchingAlgorithmHungarian)
	dt := 1.0 / 25.0 // emulate 25 fps

	for i, iteration := range bboxesIterations {
		detections := make([]*SimpleBlob, len(iteration))
		for j, bbox := range iteration {
			blob := NewSimpleBlobWithTime(bbox, dt)
			detections[j] = blob
		}
		// Get confidences for this frame
		confidences := confidenceIterations[i]
		err := tracker.MatchObjects(detections, confidences)
		if err != nil {
			t.Errorf("Frame %d: MatchObjects failed: %v", i, err)
			return
		}
	}

	correctNumOfObjects := 4
	numOfObjects := len(tracker.Objects)
	if numOfObjects != correctNumOfObjects {
		t.Errorf("Incorrect number of objects: got %d, expected %d", numOfObjects, correctNumOfObjects)
	}

	// Optional: CSV output
	file, err := os.Create("../data/blobs_bytetrack_spread.csv")
	if err != nil {
		t.Logf("Could not create CSV file: %v", err)
	} else {
		defer file.Close()
		writer := csv.NewWriter(file)
		writer.Comma = ';'
		defer writer.Flush()
		writer.Write([]string{"id", "track"})
		for objectID, object := range tracker.Objects {
			track := object.GetTrack()
			data := make([]string, len(track))
			for idx, pt := range track {
				data[idx] = fmt.Sprintf("%f,%f", pt.X, pt.Y)
			}
			dataStr := strings.Join(data, "|")
			writer.Write([]string{objectID.String(), dataStr})
		}
	}
}

func TestByteTrackerMatchObjectsNaive(t *testing.T) {
	bboxesOneData := [][]float64{{236, -25, 386, 35}, {237, -24, 387, 36}, {238, -22, 388, 38}, {236, -20, 386, 40}, {236, -19, 386, 41}, {237, -18, 387, 42}, {237, -18, 387, 42}, {238, -17, 388, 43}, {237, -14, 387, 46}, {237, -14, 387, 46}, {237, -12, 387, 48}, {237, -12, 387, 48}, {237, -11, 387, 49}, {237, -11, 387, 49}, {237, -10, 387, 50}, {237, -10, 387, 50}, {237, -8, 387, 52}, {237, -8, 387, 52}, {236, -7, 386, 53}, {236, -7, 386, 53}, {236, -6, 386, 54}, {236, -6, 386, 54}, {236, -2, 386, 58}, {235, 0, 385, 60}, {236, 2, 386, 62}, {236, 5, 386, 65}, {236, 9, 386, 69}, {235, 12, 385, 72}, {235, 14, 385, 74}, {233, 16, 383, 76}, {232, 26, 382, 86}, {233, 28, 383, 88}, {233, 40, 383, 100}, {233, 30, 383, 90}, {232, 22, 382, 82}, {232, 34, 382, 94}, {232, 21, 382, 81}, {233, 40, 383, 100}, {232, 40, 382, 100}, {232, 40, 382, 100}, {232, 36, 382, 96}, {232, 53, 382, 113}, {232, 50, 382, 110}, {233, 55, 383, 115}, {232, 50, 382, 110}, {234, 68, 384, 128}, {231, 49, 381, 109}, {232, 68, 382, 128}, {231, 31, 381, 91}, {232, 64, 382, 124}, {233, 71, 383, 131}, {231, 64, 381, 124}, {231, 74, 381, 134}, {231, 64, 381, 124}, {230, 77, 380, 137}, {232, 82, 382, 142}, {232, 78, 382, 138}, {232, 78, 382, 138}, {231, 79, 381, 139}, {231, 79, 381, 139}, {231, 91, 381, 151}, {232, 78, 382, 138}, {232, 78, 382, 138}, {233, 90, 383, 150}, {232, 92, 382, 152}, {232, 92, 382, 152}, {233, 98, 383, 158}, {232, 100, 382, 160}, {231, 92, 381, 152}, {233, 110, 383, 170}, {234, 92, 384, 152}, {234, 92, 384, 152}, {234, 110, 384, 170}, {234, 92, 384, 152}, {233, 104, 383, 164}, {234, 111, 384, 171}, {234, 106, 384, 166}, {234, 106, 384, 166}, {233, 124, 383, 184}, {236, 125, 386, 185}, {236, 125, 386, 185}, {232, 120, 382, 180}, {236, 131, 386, 191}, {232, 132, 382, 192}, {238, 139, 388, 199}, {236, 141, 386, 201}, {232, 151, 382, 211}, {236, 145, 386, 205}, {236, 145, 386, 205}, {231, 133, 381, 193}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}, {237, 148, 387, 208}}
	bboxesTwoData := [][]float64{{321, -25, 471, 35}, {322, -24, 472, 36}, {323, -22, 473, 38}, {321, -20, 471, 40}, {321, -19, 471, 41}, {322, -18, 472, 42}, {322, -18, 472, 42}, {323, -17, 473, 43}, {322, -14, 472, 46}, {322, -14, 472, 46}, {322, -12, 472, 48}, {322, -12, 472, 48}, {322, -11, 472, 49}, {322, -11, 472, 49}, {322, -10, 472, 50}, {322, -10, 472, 50}, {322, -8, 472, 52}, {322, -8, 472, 52}, {321, -7, 471, 53}, {321, -7, 471, 53}, {321, -6, 471, 54}, {321, -6, 471, 54}, {321, -2, 471, 58}, {320, 0, 470, 60}, {321, 2, 471, 62}, {321, 5, 471, 65}, {321, 9, 471, 69}, {320, 12, 470, 72}, {320, 14, 470, 74}, {318, 16, 468, 76}, {317, 26, 467, 86}, {318, 28, 468, 88}, {318, 40, 468, 100}, {318, 30, 468, 90}, {317, 22, 467, 82}, {317, 34, 467, 94}, {317, 21, 467, 81}, {318, 40, 468, 100}, {317, 40, 467, 100}, {317, 40, 467, 100}, {317, 36, 467, 96}, {317, 53, 467, 113}, {317, 50, 467, 110}, {318, 55, 468, 115}, {317, 50, 467, 110}, {319, 68, 469, 128}, {316, 49, 466, 109}, {317, 68, 467, 128}, {316, 31, 466, 91}, {317, 64, 467, 124}, {318, 71, 468, 131}, {316, 64, 466, 124}, {316, 74, 466, 134}, {316, 64, 466, 124}, {315, 77, 465, 137}, {317, 82, 467, 142}, {317, 78, 467, 138}, {317, 78, 467, 138}, {316, 79, 466, 139}, {316, 79, 466, 139}, {316, 91, 466, 151}, {317, 78, 467, 138}, {317, 78, 467, 138}, {318, 90, 468, 150}, {317, 92, 467, 152}, {317, 92, 467, 152}, {318, 98, 468, 158}, {317, 100, 467, 160}, {316, 92, 466, 152}, {318, 110, 468, 170}, {319, 92, 469, 152}, {319, 92, 469, 152}, {319, 110, 469, 170}, {319, 92, 469, 152}, {318, 104, 468, 164}, {319, 111, 469, 171}, {319, 106, 469, 166}, {319, 106, 469, 166}, {318, 124, 468, 184}, {321, 125, 471, 185}, {321, 125, 471, 185}, {317, 120, 467, 180}, {321, 131, 471, 191}, {317, 132, 467, 192}, {323, 139, 473, 199}, {321, 141, 471, 201}, {317, 151, 467, 211}, {321, 145, 471, 205}, {321, 145, 471, 205}, {316, 133, 466, 193}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}, {322, 148, 472, 208}}
	bboxesThreeData := [][]float64{{151, -25, 301, 35}, {152, -24, 302, 36}, {153, -22, 303, 38}, {151, -20, 301, 40}, {151, -19, 301, 41}, {152, -18, 302, 42}, {152, -18, 302, 42}, {153, -17, 303, 43}, {152, -14, 302, 46}, {152, -14, 302, 46}, {152, -12, 302, 48}, {152, -12, 302, 48}, {152, -11, 302, 49}, {152, -11, 302, 49}, {152, -10, 302, 50}, {152, -10, 302, 50}, {152, -8, 302, 52}, {152, -8, 302, 52}, {151, -7, 301, 53}, {151, -7, 301, 53}, {151, -6, 301, 54}, {151, -6, 301, 54}, {151, -2, 301, 58}, {150, 0, 300, 60}, {151, 2, 301, 62}, {151, 5, 301, 65}, {151, 9, 301, 69}, {150, 12, 300, 72}, {150, 14, 300, 74}, {148, 16, 298, 76}, {147, 26, 297, 86}, {148, 28, 298, 88}, {148, 40, 298, 100}, {148, 30, 298, 90}, {147, 22, 297, 82}, {147, 34, 297, 94}, {147, 21, 297, 81}, {148, 40, 298, 100}, {147, 40, 297, 100}, {147, 40, 297, 100}, {147, 36, 297, 96}, {147, 53, 297, 113}, {147, 50, 297, 110}, {148, 55, 298, 115}, {147, 50, 297, 110}, {149, 68, 299, 128}, {146, 49, 296, 109}, {147, 68, 297, 128}, {146, 31, 296, 91}, {147, 64, 297, 124}, {148, 71, 298, 131}, {146, 64, 296, 124}, {146, 74, 296, 134}, {146, 64, 296, 124}, {145, 77, 295, 137}, {147, 82, 297, 142}, {147, 78, 297, 138}, {147, 78, 297, 138}, {146, 79, 296, 139}, {146, 79, 296, 139}, {146, 91, 296, 151}, {147, 78, 297, 138}, {147, 78, 297, 138}, {148, 90, 298, 150}, {147, 92, 297, 152}, {147, 92, 297, 152}, {148, 98, 298, 158}, {147, 100, 297, 160}, {146, 92, 296, 152}, {148, 110, 298, 170}, {149, 92, 299, 152}, {149, 92, 299, 152}, {149, 110, 299, 170}, {149, 92, 299, 152}, {148, 104, 298, 164}, {149, 111, 299, 171}, {149, 106, 299, 166}, {149, 106, 299, 166}, {148, 124, 298, 184}, {151, 125, 301, 185}, {151, 125, 301, 185}, {147, 120, 297, 180}, {151, 131, 301, 191}, {147, 132, 297, 192}, {153, 139, 303, 199}, {151, 141, 301, 201}, {147, 151, 297, 211}, {151, 145, 301, 205}, {151, 145, 301, 205}, {146, 133, 296, 193}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}, {152, 148, 302, 208}}
	tracker := NewByteTracker(50, 0.1, 0.7, 0.2, MatchingAlgorithmHungarian)
	dt := 1.0 / 25.0 // emulate 25 fps

	numFrames := len(bboxesOneData)

	for i := 0; i < numFrames; i++ {
		b1Data := bboxesOneData[i]
		b2Data := bboxesTwoData[i]
		b3Data := bboxesThreeData[i]

		rectOne := NewRect(b1Data[0], b1Data[1], b1Data[2]-b1Data[0], b1Data[3]-b1Data[1])
		rectTwo := NewRect(b2Data[0], b2Data[1], b2Data[2]-b2Data[0], b2Data[3]-b2Data[1])
		rectThree := NewRect(b3Data[0], b3Data[1], b3Data[2]-b3Data[0], b3Data[3]-b3Data[1])

		blobOne := NewSimpleBlobWithTime(rectOne, dt)
		blobTwo := NewSimpleBlobWithTime(rectTwo, dt)
		blobThree := NewSimpleBlobWithTime(rectThree, dt)

		detections := []*SimpleBlob{blobOne, blobTwo, blobThree}
		// Static confidence scores for testing
		confidences := []float64{0.9, 0.8, 0.7}

		err := tracker.MatchObjects(detections, confidences)
		if err != nil {
			t.Errorf("Frame %d: MatchObjects failed: %v", i, err)
			return
		}
	}

	correctNumOfObjects := 3
	numOfObjects := len(tracker.Objects)
	if numOfObjects != correctNumOfObjects {
		t.Errorf("Incorrect number of objects: got %d, expected %d", numOfObjects, correctNumOfObjects)
	}

	// Optional: CSV output
	file, err := os.Create("../data/blobs_bytetrack_naive.csv")
	if err != nil {
		t.Logf("Could not create CSV file: %v", err)
	} else {
		defer file.Close()
		writer := csv.NewWriter(file)
		writer.Comma = ';'
		defer writer.Flush()

		writer.Write([]string{"id", "track"})
		for objectID, object := range tracker.Objects {
			track := object.GetTrack()
			data := make([]string, len(track))
			for idx, pt := range track {
				data[idx] = fmt.Sprintf("%f,%f", pt.X, pt.Y)
			}
			dataStr := strings.Join(data, "|")
			writer.Write([]string{objectID.String(), dataStr})
		}
	}
}
